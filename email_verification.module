<?php

/**
 * @file
 * Email verification
 */

/**
 * Implements hook_config_info().
 */
function email_verification_config_info() {
  $prefixes['email_verification.settings'] = array(
    'label' => t('Email verification'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Implements hook_form_alter().
 */
function email_verification_form_alter(&$form, &$form_state, $form_id) {
  if (!user_is_anonymous()) {
    return;
  }

  if ($form_id != 'user_register_form') {
    return;
  }

  if (empty($verify)) {
    $verify = isset($_GET['verify']) ? $_GET['verify'] : '';
  }
  if (empty($mail)) {
    $mail = isset($_GET['mail']) ? $_GET['mail'] : '';
  }

  $form['account']['get_code'] = array(
    '#type' => 'button',
    '#value' => 'Send verification code',
    '#limit_validation_errors' => array(),
    '#suffix' => '<div>' . t('Enter your email address and click <em>Send verification code</em>.') . '</div><div id="verification-message"></div>',
    '#ajax' => array(
      'callback' => 'email_verification_form_ajax_submit',
      'wrapper' => 'verification-message',
      'effect' => 'fade',
    ),
    '#access' => empty($verify),
  );
  $form['account']['verification_code'] = array(
    '#type' => 'textfield',
    '#title' => t('Verification code'),
    '#required' => 1,
  );
  $form['#validate'][] = 'email_verification_register_validate';

  if ($verify) {
    $form['account']['verification_code']['#default_value'] = $verify;
  }
  if ($mail) {
    $form['account']['mail']['#default_value'] = $mail;
    // Set field to read only.
    $form['account']['mail']['#attributes']['readonly'] = 'readonly';
  }

}

/**
 * Submit handler for email_verification_form_alter().
 */
function email_verification_form_ajax_submit(&$form, &$form_state) {
  $mail = $form_state['values']['mail'];
  if (!valid_email_address($mail)) {
    return(t('The email address appears to be invalid. No email was sent.'));
  }

  // Generate verification code.
  $verification_code = md5(backdrop_get_hash_salt() . $mail);

  // Find verification code or insert/update.
  $vc_id = db_select('email_verification', 'ev')
    ->fields('ev', array('id'))
    ->condition('mail', $mail, '=')
    ->execute()
    ->fetchField();

  if (!($vc_id) || $vc_id == '') {
    db_insert('email_verification')
    ->fields(array(
        'mail' => $mail,
        'code' => $verification_code,
      ))
      ->execute();
  } else {
    db_update('email_verification')
    ->fields(array(
        'mail' => $mail,
        'code' => $verification_code,
      ))
      ->condition('id', $vc_id, '=')
      ->execute();
  }

  // Mail the verification code.
  $to = $mail;
  $from = config_get('system.core', 'site_mail');

  $params['subject'] = t('[@site_name] Registration form verification code', array(
    '@site_name' => config_get('system.core', 'site_name'),
  ));

  $params['verification_code'] = $verification_code;
  $params['mail'] = $mail;

  $sent = backdrop_mail('email_verification', 'verify', $to, language_default(), $params, $from);

  if ($sent) {
    return (t('Email sent successfully. Please check your email inbox for your verification code.'));
  } else {
    return (t('Email not sent. An error was encountered when trying to send the email.'));
  }
}

/**
 * Validate handler for email_verification_form_alter().
 */
function email_verification_register_validate(&$form, &$form_state) {
  $mail = $form_state['values']['mail'];

  // Get verification code for the provided email address.
  $code = db_select('email_verification', 'ev')
    ->fields('ev', array('code'))
    ->condition('mail', $mail)
    ->execute()->fetchField();

  if ($form_state['values']['verification_code'] !== $code) {
    form_set_error('verification_code', t('The verification code appears to be invalid.'));
  }
}

/**
 * Implements hook_mail().
 */
function email_verification_mail($key, &$message, $params) {
  $language = $message['language'];

  $variables = array('email-verification' => array(
    'verification-code' => $params['verification_code'],
    'mail' => $params['mail'],
  ));

  $message['subject'] .= _email_verification_text($key . '_subject', $language, $variables);
  $message['body'][] = _email_verification_text($key . '_body', $language, $variables);
}

/**
 * Returns a mail string for a variable name.
 *
 * @param string $key
 *   The config key that provides the mail text.
 * @param object $language
 *   A language object.
 * @param array $variables
 *   An array of token keys and values.
 *
 * @return
 *   A string value containing the text for the config key.
 */
function _email_verification_text($key, $language = NULL, $variables = array()) {
  $langcode = isset($language) ? $language->langcode : NULL;

  return token_replace(config('email_verification.settings')->getTranslated($key, array(), array('langcode' => $langcode)), $variables, array('langcode' => $langcode, 'callback' => 'email_verification_mail_tokens', 'sanitize' => FALSE, 'clear' => TRUE));
}

/**
 * Token callback to add unsafe tokens for mails.
 *
 * This function is used by the token_replace() call at the end of
 * _email_verification_text() to set up some additional tokens that can be
 * used in email messages generated by email_verification_mail().
 *
 * @param $replacements
 *   An associative array variable containing mappings from token names to
 *   values (for use with strtr()).
 * @param $data
 *   An associative array of token replacement values. If the 'email-verification' element
 *   exists, it must contain the following properties:
 *   - verification-code: The unique verification code.
 *   - verification-url: The url containing the unique verification code.
 * @param $options
 *   Unused parameter required by the token_replace() function.
 */
function email_verification_mail_tokens(&$replacements, $data, $options) {
  if (isset($data['email-verification'])) {
    $replacements['[email-verification:verification-code]'] = $data['email-verification']['verification-code'];
    $replacements['[email-verification:verification-url]'] = email_verification_verify_url($data['email-verification']);
  }
}

/**
 * Generates a unique URL for verifying email.
 *
 * @param array $params
 *   An array containing the following properties:
 *   - verification_code: Unique code.
 *   - mail: The email address entered into the registration form.
 *
 * @return
 *   A unique URL that provides a verification code so the person can verify
 *   and register.
 */
function email_verification_verify_url($params) {
  return url(
    'user/register',
    array(
      'query' => array(
        'verify' => $params['verification-code'],
        'mail' => $params['mail'],
      ),
      'absolute' => TRUE,
    )
  );
}
